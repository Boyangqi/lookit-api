steps:

- id: boot-postgres
  name: gcr.io/cloud-builders/docker
  args: [
    'run',
    '-d',
    '--name=lookitdb',
    '--network=cloudbuild',
    '-e',
    'POSTGRES_PASSWORD=password',
    'postgres:9.6',
  ]

# Use dockerize per suggestion here:
# https://github.com/GoogleCloudPlatform/cloud-builders/issues/376#issuecomment-498624099
- id: wait-for-postgres
  name: jwilder/dockerize:0.6.1
  args: ['dockerize', '-timeout=60s', '-wait=tcp://lookitdb:5432']

- id: build-image
  name: gcr.io/cloud-builders/docker
  args: [
    'build',
    '--tag',
    'lookit',
    '--build-arg',
    'GIT_COMMIT=$COMMIT_SHA',
    '--build-arg',
    'GIT_TAG=$TAG_NAME',
    '--network=cloudbuild',
    '.'
  ]

- id: run-tests
  name: lookit
  args: ['python', 'manage.py', 'test']
  env:
    - 'DB_HOST=lookitdb'
    - 'DB_PASSWORD=password'

- id: tag-image
  name: gcr.io/cloud-builders/docker
  args: [ 'tag', 'lookit', 'gcr.io/$PROJECT_ID/lookit:$COMMIT_SHA']

- id: push-image-to-gcr
  name: gcr.io/cloud-builders/docker
  args: [ 'push', 'gcr.io/$PROJECT_ID/lookit:$COMMIT_SHA']

- id: deploy-to-cluster
  name: gcr.io/cloud-builders/docker
  args: [
    'run',
    '--network=cloudbuild',
    '--env',
    'BUILD_ID=$BUILD_ID',
    '--env',
    'REPO_NAME=$REPO_NAME',
    '--env',
    'COMMIT_SHA=$COMMIT_SHA',
    '--env',
    'SHORT_SHA=$SHORT_SHA',
    '--env',
    'BRANCH_NAME=$BRANCH_NAME',
    '--env',
    'TAG_NAME=$TAG_NAME',
    'gcr.io/$PROJECT_ID/lookit-orchestrator',
  ]

# Create a Sentry release
# SENTRY_AUTH_TOKEN is decrypted before this step runs.
# Note: Need a shell to resolve environment variables with $$
# Since sentry-cli image is based on alpine, we use `ash`
- id: create-sentry-release
  name: getsentry/sentry-cli
  entrypoint: ash
  args:
  - '-c'
  - |
    cd /workspace
    if [[ "$BRANCH_NAME" == "master" ]]; then
        export SENTRY_PROJECT=lookit-backend
    elif [[ "$BRANCH_NAME" == "develop" ]]; then
        export SENTRY_PROJECT=lookit-backend-w1
    else
        echo "Branch $BRANCH_NAME not mapped to sentry environment"
        exit 0
    fi
    export VERSION=$(sentry-cli releases propose-version)
    sentry-cli releases new -p "$$SENTRY_PROJECT" "$$VERSION"
    sentry-cli releases set-commits "$$VERSION" --auto
    sentry-cli releases finalize "$$VERSION"
  secretEnv: [ 'SENTRY_AUTH_TOKEN' ]
  env: [
    'SENTRY_ORG=massachusetts-institute-of-technology'
  ]

# cloud-build-local won't clean `docker run -d`-ed container so we have to do it here.
- id: cloud-build-local-cleanup
  name: gcr.io/cloud-builders/docker
  args: ['rm', '--force', 'lookitdb']

images:
- 'gcr.io/$PROJECT_ID/lookit:$COMMIT_SHA'

# SENTRY_AUTH_TOKEN is encrypted with GKMS
secrets:
- kmsKeyName: projects/mit-lookit-keys/locations/east1-d/keyRings/lookit-keyring/cryptoKeys/sentry-auth
  secretEnv:
    SENTRY_AUTH_TOKEN: CiQAVYLHlum+JbxvLUXADsLiiIwXjocXFGg5SAsxKyvAkDRjEaESaABnxmN4TReBWF0cY+XPS8xytlGSUhClZewwH7ttpBFKC65+Y0a6W8XIsTjyQMyVzWiLxSOef46bmI1Bo8JIbh/ErIRWm3rPBNFs843z52oF8M93+miMUlt8UOWmIgyq1U/fjThhq0UI