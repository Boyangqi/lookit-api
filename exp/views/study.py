from django.http import HttpResponseRedirect
from django.shortcuts import reverse
from django.views import generic

from guardian.mixins import LoginRequiredMixin
from guardian.shortcuts import get_objects_for_user, get_perms

from studies.forms import StudyForm
from studies.models import Study


class StudyCreateView(LoginRequiredMixin, generic.CreateView):
    '''
    StudyCreateView allows a user to create a study and then redirects
    them to the detail view for that study.
    '''
    fields = ('name', 'organization', 'blocks', )
    model = Study

    def get_form_class(self):
        return StudyForm

    def get_success_url(self):
        return reverse('exp:study-detail', kwargs=dict(pk=self.object.id))


class StudyListView(LoginRequiredMixin, generic.ListView):
    '''
    StudyListView shows a list of studies that a user has permission to.
    '''
    model = Study

    def get_queryset(self, *args, **kwargs):
        queryset = get_objects_for_user(self.request.user, 'studies.can_view')
        if self.request.GET.get('state'):
            queryset = queryset.filter(state=self.request.GET.get('state'))
        return queryset


class StudyDetailView(LoginRequiredMixin, generic.DetailView):
    '''
    StudyDetailView shows information about a study.
    '''
    template_name = 'studies/study_detail.html'
    model = Study

    def get_permitted_triggers(self, triggers):
        permitted_triggers = []
        organization_permissions = get_perms(self.request.user, self.object.organization)

        admin_triggers = ['reject', 'approve']

        for trigger in triggers:
            # remove autogenerated triggers
            if trigger.startswith('to_'):
                continue
            # remove triggers that people don't have permission to
            if not self.request.user.is_superuser or (trigger in admin_triggers and 'is_admin' not in organization_permissions):
                continue

            permitted_triggers.append(trigger)

        return permitted_triggers

    def post(self, *args, **kwargs):
        trigger = self.request.POST['trigger']
        object = self.get_object()
        if hasattr(object, trigger):
            # transition through workflow state
            getattr(object, trigger)(user=self.request.user)
        return HttpResponseRedirect(reverse('exp:study-detail', kwargs=dict(pk=object.pk)))

    def get_context_data(self, **kwargs):
        context = super(StudyDetailView, self).get_context_data(**kwargs)
        context['triggers'] = self.get_permitted_triggers(
            self.object.machine.get_triggers(self.object.state))
        return context
